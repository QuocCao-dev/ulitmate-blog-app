// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username      String    @unique
  password      String
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  posts      Post[]
  comments   Comment[]
  likes      Like[]
  bookmarks  Bookmark[]
  followedBy User[]     @relation("UserFollows")
  followings User[]     @relation("UserFollows")
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title         String  @unique
  description   String  @db.Text
  slug          String  @unique
  featuredImage String?

  html String? @db.Text
  text String? @db.Text

  authorId  String
  author    User       @relation(fields: [authorId], references: [id])
  tags      Tag[]
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]

  @@index([authorId])
}

model Tag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique
  description String? @db.Text
  slug        String
  posts       Post[]
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String @db.Text

  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@index([userId])
  @@index([postId])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([userId, postId])
  @@index([postId])
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([userId, postId])
  @@index([postId])
}
